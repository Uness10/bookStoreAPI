openapi: 3.0.0
info:
  title: Bookstore API
  description: API for managing books, authors, customers, and orders in the bookstore
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local development server
paths:
  /books:
    post:
      summary: Create a new book
      description: This endpoint creates a new book.
      operationId: createBook
      tags:
        - Books
      requestBody:
        description: Book object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
    get:
      summary: List all books or get by some filters in query object  : title, author,genre , quanitity (number of items in the stock)
      description: This endpoint lists all books.
      operationId: listBooks
      tags:
        - Books
      responses:
        '200':
          description: List of all books,  if no  query object ( with filters) is provided in json.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Internal server error
  /books/{id}:
    get:
      summary: Retrieve a book by ID
      description: This endpoint retrieves a book by its unique ID.
      operationId: getBookById
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book to retrieve
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
        '500':
          description: Internal server error
    put:
      summary: Update a book
      description: This endpoint updates an existing book by its ID.
      operationId: updateBook
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book to update
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Book object to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '404':
          description: Book not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a book
      description: This endpoint deletes a book by its ID.
      operationId: deleteBook
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: The ID of the book to delete
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
        '500':
          description: Internal server error
  /authors:
    post:
      summary: Create a new author
      description: This endpoint creates a new author.
      operationId: createAuthor
      tags:
        - Authors
      requestBody:
        description: Author object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
    get:
      summary: List all authors or get by some filters : firstName , ladtName , name.
      description: This endpoint lists all authors.
      operationId: listAuthors
      tags:
        - Authors
      responses:
        '200':
          description: list authors  
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '500':
          description: Internal server error
  /authors/{id}:
    get:
      summary: Retrieve an author by ID
      description: This endpoint retrieves an author by its unique ID.
      operationId: getAuthorById
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          description: The ID of the author to retrieve
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Author retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
        '500':
          description: Internal server error
    put:
      summary: Update an author
      description: This endpoint updates an existing author by its ID.
      operationId: updateAuthor
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          description: The ID of the author to update
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Author object to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
        '404':
          description: Author not found
        '500':
          description: Internal server error
    delete:
      summary: Delete an author
      description: This endpoint deletes an author by its ID.
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          description: The ID of the author to delete
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Author deleted successfully
        '404':
          description: Author not found
        '500':
          description: Internal server error
  /customers:
    post:
      summary: Create a new customer
      description: This endpoint creates a new customer.
      operationId: createCustomer
      tags:
        - Customers
      requestBody:
        description: Customer object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /customers/{id}:
    get:
      summary: Retrieve a customer by ID
      description: This endpoint retrieves a customer by its unique ID.
      operationId: getCustomerById
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          description: The ID of the customer to retrieve
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
        '500':
          description: Internal server error
    put:
      summary: Update a customer
      description: This endpoint updates an existing customer by its ID.
      operationId: updateCustomer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          description: The ID of the customer to update
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Customer object to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input
        '404':
          description: Customer not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a customer
      description: This endpoint deletes a customer by its ID.
      operationId: deleteCustomer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          description: The ID of the customer to delete
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found
        '500':
          description: Internal server error
  /orders:
    post:
      summary: Create a new order
      description: This endpoint creates a new order.
      operationId: createOrder
      tags:
        - Orders
      requestBody:
        description: Order object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /orders/{id}:
    get:
      summary: Retrieve an order by ID
      description: This endpoint retrieves an order by its unique ID.
      operationId: getOrderById
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          description: The ID of the order to retrieve
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '500':
          description: Internal server error
    put:
      summary: Update an order
      description: This endpoint updates an existing order by its ID.
      operationId: updateOrder
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          description: The ID of the order to update
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Order object to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '404':
          description: Order not found
        '500':
          description: Internal server error
    delete:
      summary: Delete an order
      description: This endpoint deletes an order by its ID.
      operationId: deleteOrder
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          description: The ID of the order to delete
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found
        '500':
          description: Internal server error
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the author
          example: 1
        firstName:
          type: string
          description: The author's first name
          example: John
        lastName:
          type: string
          description: The author's last name
          example: Doe
        bio:
          type: string
          description: A brief biography of the author
          example: John Doe is a well-known author in fiction.
      required:
        - firstName
        - lastName
        - bio
    Book:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the book
          example: 1
        title:
          type: string
          description: The title of the book
          example: The Great Book
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            type: string
          description: List of genres
          example:
            - Fiction
            - Adventure
        publishedAt:
          type: string
          format: date-time
          description: The date when the book was published
          example: '2022-05-01T00:00:00Z'
        price:
          type: number
          format: float
          description: Price of the book
          example: 19.99
        stock:
          type: integer
          description: Available stock for the book
          example: 50
      required:
        - title
        - author
        - price
        - stock
    Customer:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the customer
          example: 1
        name:
          type: string
          description: The name of the customer
          example: Alice Smith
        email:
          type: string
          description: The email of the customer
          example: alice@example.com
        address:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
          description: The date when the customer was created
          example: '2023-01-10T00:00:00Z'
      required:
        - name
        - email
        - address
    Address:
      type: object
      properties:
        street:
          type: string
          description: Street address
          example: 123 Main St
        city:
          type: string
          description: City
          example: Los Angeles
        state:
          type: string
          description: State
          example: CA
        postalCode:
          type: string
          description: Postal code
          example: '90001'
        country:
          type: string
          description: Country
          example: USA
      required:
        - street
        - city
        - state
        - postalCode
        - country
    Order:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the order
          example: 1
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalPrice:
          type: number
          format: float
          description: Total price of the order
          example: 39.99
        createdAt:
          type: string
          format: date-time
          description: The date when the order was created
          example: '2023-01-10T00:00:00Z'
        status:
          type: string
          description: The status of the order
          example: Pending
      required:
        - customer
        - items
        - totalPrice
        - status
    OrderItem:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity:
          type: integer
          description: Quantity of the book in the order
          example: 2
      required:
        - book
        - quantity
